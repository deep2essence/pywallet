#!/usr/bin/env python

MAX_MASK_MODULO = 100#dice:6, coin flip:2
MAX_BET_MASK = 2 ** MAX_MASK_MODULO
POPCNT_MULT = int("0000000000002000000000100000000008000000000400000000020000000001",16)
POPCNT_MASK = int("0001041041041041041041041041041041041041041041041041041041041041",16)
POPCNT_MODULO = int("3F",16)

MIN_BET = 0.01
MAX_AMOUNT = 300000

bet=dict()

def uint(b):
    return int(b,16)

# amount: 0.1 ~ 300000
# mask:   1234:1111(0xf),125:10011(0x13),123:111(0x7)
# modulo: 2,6,36,100  
# rollUnder: 0 ~ 63(related to reward, not critical in most cases)
#####################################
# blkhash: block number when committing
# commitblknum(cblknum) > block.number for signer checking
# placeblknum(pblknum) = block.number for betting
# blkhash = blockhash
#####################################
# commit/reveal: bet index,generated by platform,THIS IS THE KEY, RNG
#####################################
# entropy: sha3(blkhash,commit)
# dice:   0 ~ modulo(entropy%modulo)
# 2**dice: 000001,000010,000100,001000,010000,100000
# WIN DETECT: (0,!0)2**dice & mask
def commitBet(amount,mask,modulo,pblknum,commit):
    print("amount: {0}".format(amount))
    print("mask: {0}".format(mask))
    print("modulo: {0}".format(modulo))
    print("pblknum: {0}".format(pblknum))
    print("commit: {0}".format(commit))
    # placeBet
    assert modulo > 1 and modulo < MAX_MASK_MODULO
    assert amount > MIN_BET and  amount < MAX_AMOUNT
    assert mask > 0 and mask < MAX_BET_MASK
    rollUnder=((mask*POPCNT_MULT)&POPCNT_MASK) % POPCNT_MODULO
    print("rollUnder: {0}".format(rollUnder))
    # settleBet, settleBetCommon
    from sha3 import keccak_256
    from ethereum.abi import encode_single,encode_abi
    from req import getblockHashByNumber
    blkhash=getblockHashByNumber(pblknum)
    assert blkhash != ''
    print("blkhash: {0}".format(blkhash))
    encoded = encode_abi(('uint256','bytes'),(long(commit,16),blkhash.strip("0x")))
    entropy=keccak_256(encoded).hexdigest()
    print("entropy: {0}".format(entropy))
    dice = uint(entropy) % modulo
    print("dice: {0}".format(dice))
    diceWinAmount,jackpotFee = getDiceWinAmount(amount, modulo, rollUnder)
    print("diceWinAmount: {0},jackpotFee: {1}".format(diceWinAmount,jackpotFee))
    diceWin,jackpotWin=0,0
    if modulo <= MAX_MASK_MODULO:
        print("2**dice:{0}".format(2**dice))
        print("mask:   {0}".format(mask))
        if ((2 ** dice) & mask) != 0:
            diceWin = diceWinAmount
    elif dice < rollUnder:
        diceWin = diceWinAmount
    if diceWin > 0: print("You Win!!!!")
    else: print("You Lose!!!!")
    print("diceWin: {0},jackpotWin: {1}".format(diceWin,jackpotWin))

JACKPOT_FEE = 0.001
JACKPOT_MODULO = 1000
MIN_JACKPOT_BET = 0.1
HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003
HOUSE_EDGE_PERCENT = 1
def getDiceWinAmount(amount, modulo, rollUnder):
    assert 0 < rollUnder and rollUnder < modulo
    jackpotFee = JACKPOT_FEE if amount >= MIN_JACKPOT_BET else 0
    houseEdge = amount * HOUSE_EDGE_PERCENT / 100
    if houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT:
        houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT
    assert houseEdge + jackpotFee <= amount
    winAmount = (amount - houseEdge - jackpotFee) * modulo / rollUnder
    return winAmount,jackpotFee

# mask:   0000000000000000000000000000000000000000000000000000000000000007
# modulo: 0000000000000000000000000000000000000000000000000000000000000006
# cblknum: 0000000000000000000000000000000000000000000000000000000000b75bae
# pblknum:
# commit: 3cc363a74120d0c5fd7f9ba1ca1d77288080fe83a369489dcab541a0c0a34a04
# r:  a1b3db60f50fe3ba70b33a4a801ff2852a8665e151a1199c398a86fcb34c30f0
# s:  af817fa334c20f46ff98c5bc3af4752741301e61a011ffac81ce153f3b87e70e
def test_wincase1():
    amount = 0.1
    mask   = "0000000000000000000000000000000000000000000000000000000000000007"
    modulo = "0000000000000000000000000000000000000000000000000000000000000006"
    pblknum = ""
    commit = "3cc363a74120d0c5fd7f9ba1ca1d77288080fe83a369489dcab541a0c0a34a04"
    nmask = int(mask,16)
    nmodulo = int(modulo,16)
    npblknum = int(pblknum,16)
    commitBet(amount,nmask,nmodulo,npblknum,commit)

def test_wincase2():
    amount = 0.25
    mask   = "000000000000000000000000000000000000000000000000000000000000000f"
    modulo = "0000000000000000000000000000000000000000000000000000000000000006"
    pblknum = ""
    commit = "57f6da78e5a4764c633d8a2978f0820f499d414c57e96f285d9c81acdb87b073"
    nmask = int(mask,16)
    nmodulo = int(modulo,16)
    npblknum = int(pblknum,16)
    commitBet(amount,nmask,nmodulo,npblknum,commit)

def test_losecase():
    amount = 5
    mask   = "0000000000000000000000000000000000000000000000000000000000000038"
    modulo = "0000000000000000000000000000000000000000000000000000000000000006"
    pblknum = ""
    commit = "f941b3faff3a5b177d4137d90b38b8297466fedc5a2215ae00e7d3356f27c38c"
    nmask = int(mask,16)
    nmodulo = int(modulo,16)
    npblknum = int(pblknum,16)
    commitBet(amount,nmask,nmodulo,npblknum,commit)

if __name__ == "__main__":
    # test_losecase()
    test_wincase2()
